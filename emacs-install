#! /bin/sh

set -e

defaultRelease=28.2
downloads=~/Downloads

usage() {
    local code=0
    basename=$(basename $0)
    [ $# -eq 0 ] || echo >&2 "$basename: $@" && code=2
    echo "USAGE: $basename [--deps] [--gpg-if-available] [--help] [--kit athena|gtk|lucid] [--noop] [--release X.Y] [--tiny]"
    exit $code
}

validate() {
    [ $# -ge 2 ] || usage "missing option argument: $1"
}

while [ $# -ne 0 ] ; do
    case $1 in
        --deps)             deps=1                                     ; shift   ;;
        --gpg-if-available) gpg_if_available=1                         ; shift   ;;
        --help)             usage                                                ;;
        --kit)              validate "$@" ; kit=$2                     ; shift 2 ;;
        --noop)             noop=1                                     ; shift   ;;
        --release)          validate "$@" ; release=$2                 ; shift 2 ;;
        --tiny)             tiny=1                                     ; shift   ;;
        *)                  usage "illegal argument: $1"                         ;;
    esac
done

[ -z "$kit" -o -z "$tiny" ] || usage "cannot set both --ket KIT and --tiny"

# The OS affects installation location and libraries that need to be
# installed.
os=$(uname -s | tr A-Z a-z)

# Linux has a few variants that change the packages one must install, and the
# command used to install those packages.
if [ "$os" = "linux" ] ; then
    if [ -f /etc/redhat-release ] ; then
        # Different el major releases have different commands to use.
        os=el$(awk '{for(i=0;i<NF;i++) if($i == "release"){print $(i+1);exit}}' /etc/redhat-release | cut -d. -f1)
    elif [ -f /etc/debian-release ] ; then
        os=debian
    fi
fi

config="--prefix=$HOME/.local/share/${os}"

if [ -z "$tiny" ] ; then
    # Disables most library support, but still builds with X, which will be
    # disabled below.
    config="$config --without-all"
else
    # Emacs' INSTALL documentation recommends to avoid starting a D-Bus
    # session bus when running Emacs as a daemon or via a remote ssh
    # connection.
    config="$config --without-dbus --without-gconf --without-gsettings --without-sound"
fi

# Specify base packages needed to build or run Emacs on each supported
# operating system.
case $os in
    darwin)  packages="$packages xz" ;;
    debian)  : ;; # do not error when no base packages required
    el?)     : ;; # do not error when no base packages required
    freebsd) packages="$packages $(pkg rquery %dn emacs-devel)" ;;
    openbsd) packages="$packages gmake" ;;
    *)       echo >&2 "WARNING: no base packages defined: $os" ;;
esac

# gnutls: GNU Transport Layer Security Library
case $os in
    darwin)  packages="$packages gnutls gnutls-devel" ;;
	el?)     packages="$packages gnutls gnutls-devel" ;;
    freebsd) packages="$packages gnutls" ;;
    openbsd) packages="$packages gnutls" ;;
    *)       echo >&2 "WARNING: no gnutls packages defined: $os" ;;
esac

# jansson: Small library for parsing and writing JSON documents.
case $os in
    darwin)  packages="$packages jansson" ;;
    debian)  packages="$packages libjansson-dev" ;;
    el?)     packages="$packages jansson jansson-devel" ;;
    freebsd) packages="$packages jansson" ;;
    openbsd) packages="$packages jansson" ;;
    *)       echo >&2 "WARNING: no jansson packages defined: $os" ;;
esac

# ncurses: terminal independent library
case $os in
    darwin)  packages="$packages ncurses" ;;
    el?)     packages="$packages ncurses ncurses-devel" ;;
    freebsd) packages="$packages ncurses" ;;
    *)       echo >&2 "WARNING: no ncurses packages defined: $os" ;;
esac

# graphics
if [ -n "$kit" ] ; then
    # If using graphics, first specify libraries which are not related to
    # which graphics framework is to be used.
    case $os in
        el?)     packages="$packages giflib giflib-devel harfbuzz harfbuzz-devel libjpeg libjpeg-devel libpng-devel libtiff-devel libX11-devel libXpm-devel openjpeg2-devel" ;;
        openbsd) config="$config --with-gif=ifavailable --with-jpeg=ifavailable --with-png=ifavailable --with-tiff=ifavailable" ;;
        *)       echo >&2 "WARNING: no graphics packages defined for: $os" ;;
    esac

    # Different graphics framework libraries have different package
    # requirements.
    case $kit in
        athena|lucid)
            case $os in
                el?) packages="$packages libXaw libXaw-devel" ;;
                *)   echo >&2 "WARNING: no lucid packages defined for: $os" ;;
            esac
            config="$config --without-toolkit-scroll-bars"
            ;;
        gtk)
            case $os in
                el?) packages="$packages gtk2 gtk2-devel" ;;
                *)   echo >&2 "WARNING: no gtk packages defined for: $os" ;;
            esac
            ;;
        motif) # standard file system dialogs, but valid
            config="$config --without-toolkit-scroll-bars"
            ;;
        *) echo >&2 "ERROR: graphics kit not recognized: $kit" ; exit 1 ;;
    esac

    config="$config --with-x-toolkit=$kit"
else
    config="$config --without-gif --without-jpeg --without-png --without-rsvg --without-tiff --without-x --without-xpm"
    case $os in
        darwin)  config="$config --without-ns" ;;
    esac
fi

packages=$(echo $packages | tr ' ' '\n' | sort | tr '\n' ' ')

if [ -n "$noop" ] ; then
    echo "CONFIGURE: $config"
    echo "PACKAGES:  $packages"
    exit 0
fi

# If dependency installation is requested, need to consider which graphical
# kit to configure and which OS running on.
if [ -n "$deps" -a -n "$packages" ] ; then
    # Install build and runtime dependencies.
    echo "PACKAGES:  $packages"
    echo "Please type your password to install packages:"
    case $os in
        darwin)
            sudo port install $packages
            ;;
        debian)
            sudo apt-get install build-essential
            sudo apt-get build-dep emacs
            sudo apt-get install $packages
            ;;
        el7)
            sudo yum-builddep emacs
            sudo yum install $packages
            ;;
        el8)
            : sudo dnf builddep emacs
            sudo dnf install $packages
            ;;
        freebsd)
            doas pkg install -y $packages
            ;;
        openbsd)
            doas pkg_add install $packages
            ;;
        *)
            echo >&2 "ERROR: no support for installing packages: $os"
            exit 1
            ;;
    esac
fi

# Identify desired release version and download bundle.

if [ -z "$release" ] ; then
    printf "Which release? [%s] " "$defaultRelease"
    read release
    [ -n "$release" ] || release=$defaultRelease
fi

bundle=emacs-${release}.tar.xz
bundle_local=$downloads/$bundle
if [ ! -f "$bundle_local" ] ; then
    echo "Downloading ${bundle}..."
    curl -L --create-dirs --output $bundle_local http://ftp.gnu.org/gnu/emacs/$bundle
fi

if $(which gpg >/dev/null 2>&1) ; then
    keyring=gnu-keyring.gpg
    keyring_local=$downloads/$keyring
    if [ ! -f "$keyring_local" ] ; then
        echo "Downloading ${keyring}..."
        curl -L --create-dirs --output $keyring_local https://ftp.gnu.org/gnu/$keyring
        gpg --import $keyring_local
    fi

    sig=${bundle}.sig
    sig_local=$downloads/$sig
    if [ ! -f "$sig_local" ] ; then
        echo "Downloading ${sig}..."
        curl -L --create-dirs --output $sig_local http://ftp.gnu.org/gnu/emacs/$sig
    fi

    while ! gpg --verify --keyring $keyring_local $sig_local $bundle_local ; do
        echo "WARNING: bundle file doesn't match its signature." >&2
        echo "bundle:    $bundle_local" >&2
        echo "signature: $sig_local" >&2
        printf "Remove bundle and signature, and retry? [Y/n] "
        read yn
        case $yn in
            N|n)
                echo "Exiting because bundle does not match signature."
                exit 1
                ;;
            *)
                rm -fv $sig_local $bundle_local
                echo "Re-downloading ${bundle}..."
                curl -L --create-dirs --output $bundle_local http://ftp.gnu.org/gnu/emacs/$bundle
                echo "Re-downloading ${sig}..."
                curl -L --create-dirs --output $sig_local http://ftp.gnu.org/gnu/emacs/$sig
                ;;
        esac
    done
    echo "Bundle file matches its signature"
else
    echo "WARNING: gpg program not found to verify bundle signature." >&2
    
    if [ -z "$gpg_if_available" ] ; then
        printf "Proceed anyway? [y/N] "
        read yn
        case $yn in
            Y|y) echo "Skipping bundle signature check..." ;;
            *)   echo "Exiting because cannot verify bundle integrity." ; exit 1 ;;
        esac
    fi
fi

################

build_dir=$downloads/emacs-${release}
rm -rf $build_dir
xz --decompress --stdout $bundle_local | tar -x -C $downloads -f -

cd $build_dir

echo >&2 "################ Configuring..."
echo >&2 "./configure $config"
./configure $config
code=$?
if [ "$code" -ne 0 ] ; then
    echo >&2 "ERROR: cannot configure: $code"
    exit $code
fi

echo >&2 "################ Compiling..."
make
code=$?
if [ "$code" -ne 0 ] ; then
    echo >&2 "ERROR: cannot compile: $code"
    exit $code
fi

echo >&2 "################ Installing..."
make install
code=$?
if [ "$code" -ne 0 ] ; then
    echo >&2 "ERROR: cannot install: $code"
    exit $code
fi
